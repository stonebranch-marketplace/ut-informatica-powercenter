{
    "agent": null,
    "agentCluster": null,
    "agentClusterVar": null,
    "agentFieldsRestriction": "No Restriction",
    "agentType": "Any",
    "agentVar": null,
    "automaticOutputRetrievalFieldsRestriction": "No Restriction",
    "broadcastCluster": null,
    "broadcastClusterVar": null,
    "createConsole": false,
    "credentialFieldsRestriction": "No Restriction",
    "credentials": null,
    "credentialsVar": null,
    "description": "v3.1",
    "desktopInteract": false,
    "elevateUser": false,
    "environment": [],
    "environmentVariablesFieldsRestriction": "No Restriction",
    "exitCodeOutput": null,
    "exitCodeProcessing": "Success Exitcode Range",
    "exitCodeProcessingFieldsRestriction": "No Restriction",
    "exitCodeText": null,
    "exitCodes": "0",
    "fields": [
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 1",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Repository Name",
            "name": "repositoryname",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 0,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "b51ac55126d84e758166aac9d7a197d0"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 2",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Port",
            "name": "info_port",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": true,
            "sequence": 1,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "b78b3c0fab7d4d699c2b96bf3e44d06a"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 3",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Domain Name",
            "name": "domainname",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 2,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "14dc335b297041399ee56f64526b625c"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Credential Field 1",
            "fieldType": "Credential",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Informatica Credentials",
            "name": "infocred",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": true,
            "sequence": 3,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "5d32bb17132346239e27d2ad86699816"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 4",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "User Namespace",
            "name": "usernamespace",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 4,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "d707d2e522be485698fe77cff83baf0f"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 5",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "Name of the Integration Service that runs the workflow.",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "IS Service Name",
            "name": "servicename",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": true,
            "sequence": 5,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "8f9890c368f64fa78f348e9b957af43b"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 6",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "Name of the folder containing the workflow",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Folder Name",
            "name": "foldername",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": true,
            "sequence": 6,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "04a98d00aa9649908566acbe770be40a"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 7",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "Name of the workflow to run",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Workflow Name",
            "name": "workflowname",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": true,
            "sequence": 7,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "74e8cd1cdfb5430e99a19fbbdde2b4aa"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "NORMAL",
                    "sequence": 0,
                    "sysId": "a48b0ca87f964885a3800606ddfc204f",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "RECOVERY",
                    "sequence": 1,
                    "sysId": "0c595aade0514c7aa18fdd9d10237293",
                    "useFieldValueForLabel": true
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 1",
            "fieldType": "Choice",
            "fieldValue": "NORMAL",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "Indicates the recovery strategy for the session task: - NORMAL. Restarts a session without recovery. - RECOVERY. Recovers a session.",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Request Mode",
            "name": "requestmode",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 8,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "967986b41e834057bd67b893bfba0763"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Integer Field 1",
            "fieldType": "Integer",
            "fieldValue": "60",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Timeout",
            "name": "timeout",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 9,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "b94980671a46464894844ac87b1f954c"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 11",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Hostname",
            "name": "info_host",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 10,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "d33660f56b9e4659a8efac533ce657b2"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "INFO",
                    "sequence": 0,
                    "sysId": "f2aeec6c15b0439b94c4736bb6e99800",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "DEBUG",
                    "sequence": 1,
                    "sysId": "a418e1652d46433093633fb00310d067",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "WARNING",
                    "sequence": 2,
                    "sysId": "1d7879c9a9ad44f7951395ea4b4ddb24",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "ERROR",
                    "sequence": 3,
                    "sysId": "25ce5861f2e9475dba7059a1d8932bc6",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "CRITICAL",
                    "sequence": 4,
                    "sysId": "68d5da1cb3b643f1a9e3e87e23448c4b",
                    "useFieldValueForLabel": true
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 2",
            "fieldType": "Choice",
            "fieldValue": "Info",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "log level: DEBUG, INFO, WARNING, ERROR, CRITICAL",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Loglevel",
            "name": "loglevel",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 11,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "4f4c7938f26a4786ab399c903bc7da87"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "http://",
                    "fieldValueLabel": "No",
                    "sequence": 0,
                    "sysId": "de1e220c575e42c3bac80d8bbbaeaed8",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "https://",
                    "fieldValueLabel": "Yes",
                    "sequence": 1,
                    "sysId": "8d0aca9bb12046baa7aba5aa45dcf878",
                    "useFieldValueForLabel": false
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 3",
            "fieldType": "Choice",
            "fieldValue": "No",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "SSL",
            "name": "ssl",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 12,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "f32ae19c60244d0792ca99d04f1565e2"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Boolean Field 2",
            "fieldType": "Boolean",
            "fieldValue": "true",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": true,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Get Session Log",
            "name": "getsessionlog",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 14,
            "showIfField": "Choice Field 4",
            "showIfFieldValue": "startWorkflow,startWorkflowFromTask",
            "sysId": "f8ac68c3e9744e77b3f3dec8ef79c8b3"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 8",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Task Instance Path",
            "name": "task_instance_path",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 16,
            "showIfField": "Boolean Field 2",
            "showIfFieldValue": "true",
            "sysId": "cb194c5e0adb48d0b67e0e377a7d4847"
        }
    ],
    "name": "ut-informatica-powercenter",
    "outputFailureOnly": false,
    "outputReturnFile": null,
    "outputReturnNline": "100",
    "outputReturnSline": "1",
    "outputReturnText": null,
    "outputReturnType": "NONE",
    "outputType": "STDOUT",
    "runtimeDir": null,
    "script": null,
    "scriptTypeWindows": "uapy",
    "scriptUnix": "#!/opt/universal/python3.6/bin/python3\n#\n#  Name:               UT_Informatica_RunWorkflow\n#  Purpose:            Universal Task Script to Run an Informatica Workflow\n#                      1- Get Session ID (logon_token)\n#                      2- Start Workflow\n#                      3- Monitor Workflow Completion\n#                      4- Get Session Log\n#                      5- Close Session\n#  Disclaimer\n#  No support and no warranty are provided for this Universal Task.\n#  The use of this document and the related Universal Task is on your own risk.\n#  Before using this task in a production system, please perform extensive\n#  testing.\n#\n#  Version History:\n#     0.1  NBU     2017-03-17     initial Version using a shell script and curl\n#     1.0  CCO     2017-10-02     Conversion from Shell Script Version to python\n#     1.1  NBU     2017-12-20     Using getWorkflowLog instead of getSessionLog\n#     2.0  NBU     2018-01-09     Added Logon Token support, Logging, doc\n#                                 strings and intensive error handling\n#     2.1  NBU     2018-01-11     Added support for Https connections\n#     2.2  NBU     2018-07-08     changed envelope header\n#     2.3  NBU     2021-02-05     diagnose print functions added\n#     2.4  NBU     2021-02-05     cleanup\n#     2.5  NBU     2021-02-05     GetSessionLog added\n#     2.6  NBU     2021-02-05     GetSessionLog print the correct taskname\n#                                 two new choice fields\n#     2.7  NBU     2021-02-05     cleanup\n#     2.8  NBU     2021-02-05     choice for session or wf log added\n#     2.9  NBU     2021-02-05     choice for session or wf log added\n#     3.0  NBU     2021-02-08     Funcation start task and start from task added\n#     3.1  NBU     2021-02-08     Funcation start task and start from task added\n#\n# --\n\n# -- Import required python modules\nimport argparse\nimport logging\nimport site\nimport sys\nfrom xml.dom.minidom import parseString\n\nimport requests\n\ngl_version = \"3.1\"\ngl_variable_prefix = \"var\"\ngl_get_session_log = \"${ops_var_getsessionlog}\"\ngl_error_messages = \"\"\ngl_action = \"${ops_var_action}\"\ngl_task_instance_path = \"${ops_var_task_instance_path}\"\n# -- logging settings DEBUG, INFO, WARNING, ERROR, CRITICAL\nlogging.basicConfig(level=\"${ops_var_loglevel}\",\n                    format=' %(asctime)s - %(levelname)s - %(message)s')\n\n\n# -- Main Logic Function\ndef main():\n    \"\"\"calls the required functions to run the informatica workflow\"\"\"\n    global gl_get_session_log\n    print_variables()\n    set_variables()  # - Set Variables from UTask Form or Command Line Input\n    get_session_id()  # - Create SessionID Request SOAP Env and Req Sess. ID\n    if gl_error_messages:\n        logging.error(f\"There were errors in the logs:\\n {gl_error_messages}\")\n        exit(1)\n    if gl_action == \"startWorkflow\":\n        start_workflow()  # - Start Informatica Workflow\n        monitor_workflow()  # - Monitor Informatica Workflow\n        get_workflow_log_xml()  # - Return the workflow log\n        pass\n    elif gl_action == \"startTask\":\n        start_task(gl_task_instance_path)  # 'SOAPAction': 'startTask'\n        monitor_task(gl_task_instance_path)  # - Monitor Informatica Workflow\n        gl_get_session_log = \"true\"\n        pass\n    elif gl_action == \"startWorkflowFromTask\":\n        start_workflow_from_task(gl_task_instance_path)  # - Start Informatica Workflow\n        monitor_workflow()  # - Monitor Informatica Workflow\n        get_workflow_log_xml()  # - Return the workflow log\n        pass\n    if gl_get_session_log == \"true\":\n        get_session_log(gl_task_instance_path)  # - Returns the session log of the provided task\n    close_session()  # - Logout from Session\n\n\ndef print_variables():\n    \"\"\"logging.infos out the python and script version\n    and all universal template variables\n    \"\"\"\n    logging.info(\"Python version <<< \" + sys.version + \" >>>\")\n    logging.info(\"Python sites <<< \" + str(site.getsitepackages()) + \" >>>\")\n    logging.info(\"Executing task version \" + gl_version + \" with the following \"\n                                                          \"parameters\")\n    print_defined_variables(gl_variable_prefix)\n\n\ndef print_defined_variables(variable_prefix):\n    \"\"\"logging.info's out universal template variables\"\"\"\n    all_variables = r\"${_scope}\"\n    separate_variables = [variable for variable in all_variables.split(', ') if\n                          \"ops_\" + variable_prefix in variable]\n    logging.info(str(separate_variables).replace(\", \", \",\\n\"))\n\n\n# -- Set Variables from Universal Task Form or Command Line Input\ndef set_variables():\n    \"\"\"Set Variables from Universal Task Form or Command Line Input\"\"\"\n    parser = argparse.ArgumentParser(\n        description='Purpose : Run Informatica Workflow')\n    parser.add_argument(\"--port\", default=\"${ops_var_info_port}\")\n    parser.add_argument(\"--host\", default=\"${ops_var_info_host}\")\n    parser.add_argument(\"--domain\", default=\"${ops_var_domainname}\")\n    parser.add_argument(\"--repository\", default=\"${ops_var_repositoryname}\")\n    parser.add_argument(\"--username\",\n                        default=\"${_credentialUser('${ops_var_infocred}')}\")\n    parser.add_argument(\"--password\",\n                        default=\"${_credentialPwd('${ops_var_infocred}')}\")\n    parser.add_argument(\"--namespace\", default=\"${ops_var_usernamespace}\")\n    parser.add_argument(\"--service\", default=\"${ops_var_servicename}\")\n    parser.add_argument(\"--folder\", default=\"${ops_var_foldername}\")\n    parser.add_argument(\"--workflow\", default=\"${ops_var_workflowname}\")\n    parser.add_argument(\"--requestmode\", default=\"${ops_var_requestmode}\")\n    parser.add_argument(\"--timeout\", default=\"${ops_var_timeout}\")\n    parser.add_argument(\"--path\", default=\"${ops_var_taskinstancepath}\")\n    parser.add_argument(\"--loglevel\", default=\"${ops_var_loglevel}\")\n    parser.add_argument(\"--ssl\", default=\"${ops_var_ssl}\")\n    global args\n    global logon_token\n    args = parser.parse_args()\n    # logging.info(\" -- Executing version \" + version\n    # + \" with the following paramaters\")\n    logging.info(args)\n    logging.info(\" -- Informatica Workflow to run: \" + args.workflow)\n\n\ndef check_response(log_type, response_text):\n    global gl_error_messages\n    error_messages = \"\"\n    for response_line in response_text.split(\"\\n\"):\n        logging.debug(response_line)\n        if \"ERROR : \" in response_line:\n            error_messages += response_line + \"\\n\"\n    if error_messages:\n        gl_error_messages += f\"ERROR(s) found in {log_type}:\\n{error_messages}\"\n    pass\n\n\n# -- Create SessionID Request SOAP Envelope and Request Session ID\ndef get_session_id():\n    \"\"\"Create SessionID Request SOAP Envelope and Request Session ID\"\"\"\n    logging.info(\"get_session_id\")\n    # -- Create SOAP XML\n    soap_xml = \"\"\"\n    <soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n        <soap:Header/>\n        <soap:Body>\n            <ns0:Login xmlns:ns0=\"http://www.informatica.com/wsh\">\n                <RepositoryDomainName>{domain}</RepositoryDomainName>\n                <RepositoryName>{repository}</RepositoryName>\n                <UserName>{username}</UserName>\n                <Password>{password}</Password>\n                <UserNameSpace>{namespace}</UserNameSpace>\n            </ns0:Login>\n        </soap:Body>\n    </soap:Envelope>\n    \"\"\".format(domain=args.domain, repository=args.repository,\n               username=args.username, password=args.password,\n               namespace=args.namespace)\n    # -- Set SoapCall() Parameters and Make SOAP Request\n    soap_data = soap_xml.encode('utf-8')\n    soap_url = args.ssl + args.host + \":\" + args.port + \"/wsh/services/BatchServices/Metadata\"\n    soap_headers = {\n        'content-type': 'text/soap+xml',\n        'charset': 'UTF-8',\n        'SOAPAction': 'login'\n    }\n    logging.info(\" -- Requesting Session ID (SOAP Request)\")\n    logging.debug(\" -- Request XML\" + soap_xml)\n    try:\n        response = requests.post(soap_url, data=soap_data, headers=soap_headers,\n                                 verify=False)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(' Failure : %s' % e)\n        exit(1)\n    else:\n        logging.info(\"#UT_INFO# Request SessionId Succeeded with code : \" + str(\n            response.status_code))\n        logging.debug(\" -- Response XML: \" + response.text)\n        dom = parseString(response.content)\n        for node in dom.getElementsByTagName('SessionId'):  # visit every node\n            global logon_token\n            logon_token = str(node.childNodes[0].data)\n\n\n# -- Start Informatica Workflow\ndef start_workflow():\n    \"\"\"Start Informatica Workflow using the requested Session ID\"\"\"\n    logging.info(\"start_workflow\")\n    # -- Create SOAP XML\n    soap_xml = \"\"\"\n    <soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:wsh=\\\"http://www.informatica.com/wsh\">\n        <soapenv:Header>\n            <wsh:Context>\n                <SessionId>{logon_token}</SessionId>\n            </wsh:Context>\n        </soapenv:Header>\n        <soapenv:Body>\n            <wsh:StartWorkflow>\n                <DIServiceInfo>\n                    <DomainName>{domain}</DomainName>\n                    <ServiceName>{service}</ServiceName>\n                </DIServiceInfo>\n                <FolderName>{folder}</FolderName>\n                <WorkflowName>{workflow}</WorkflowName>\n                <RequestMode>{requestmode}</RequestMode>\n            </wsh:StartWorkflow>\n        </soapenv:Body>\n    </soapenv:Envelope>\n    \"\"\".format(logon_token=logon_token, domain=args.domain,\n               service=args.service, folder=args.folder, workflow=args.workflow,\n               requestmode=args.requestmode)\n    # -- Set SoapCall() Parameters and Make SOAP Request\n    soap_data = soap_xml.encode('utf-8')\n    soap_url = args.ssl + args.host + \":\" + args.port + \"/wsh/services/BatchServices/DataIntegration?WSDL\"\n    soap_headers = {\n        'content-type': 'text/soap+xml',\n        'charset': 'UTF-8',\n        'SOAPAction': 'startWorkflow'\n    }\n    logging.info(\n        \" -- Starting Workflow (SOAP Request) WORKFLOW = \" + args.workflow)\n    logging.debug(\" -- Request XML: \" + soap_xml)\n    try:\n        response = requests.post(soap_url, data=soap_data, headers=soap_headers,\n                                 verify=False)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(' Failure : %s' % e)\n        logging.error(\n            ' Check that the Workflow: %s, foldername: %s and is_servicename: %s are correct.' % (\n                args.workflow, args.folder, args.service))\n        exit(1)\n    else:\n        logging.info(\" Starting Workflow Succeeded with code : \" + str(\n            response.status_code))\n        logging.debug(\" -- Response XML: \" + response.text)\n\n\n# -- Start Informatica Task\ndef start_task(task_instance_path):\n    \"\"\"Start Informatica Task using the requested Session ID\"\"\"\n    logging.info(\"start_workflow\")\n    # -- Create SOAP XML\n    soap_xml = \"\"\"\n    <soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:wsh=\\\"http://www.informatica.com/wsh\">\n        <soapenv:Header>\n            <wsh:Context>\n                <SessionId>{logon_token}</SessionId>\n            </wsh:Context>\n        </soapenv:Header>\n        <soapenv:Body>\n            <wsh:StartWorkflow>\n                <DIServiceInfo>\n                    <DomainName>{domain}</DomainName>\n                    <ServiceName>{service}</ServiceName>\n                </DIServiceInfo>\n                <FolderName>{folder}</FolderName>\n                <WorkflowName>{workflow}</WorkflowName>\n                <RequestMode>{requestmode}</RequestMode>\n                <TaskInstancePath>{task_instance_path}</TaskInstancePath>\n            </wsh:StartWorkflow>\n        </soapenv:Body>\n    </soapenv:Envelope>\n    \"\"\".format(logon_token=logon_token, domain=args.domain,\n               service=args.service, folder=args.folder, workflow=args.workflow,\n               requestmode=args.requestmode,\n               task_instance_path=task_instance_path)\n    # -- Set SoapCall() Parameters and Make SOAP Request\n    soap_data = soap_xml.encode('utf-8')\n    soap_url = args.ssl + args.host + \":\" + args.port + \"/wsh/services/BatchServices/DataIntegration?WSDL\"\n    soap_headers = {\n        'content-type': 'text/soap+xml',\n        'charset': 'UTF-8',\n        'SOAPAction': 'startTask'\n    }\n    logging.info(\n        \" -- Starting Task (SOAP Request)  \" + task_instance_path + \", in WORKFLOW = \" + args.workflow)\n    logging.debug(\" -- Request XML: \" + soap_xml)\n    try:\n        response = requests.post(soap_url, data=soap_data, headers=soap_headers,\n                                 verify=False)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(' Failure : %s' % e)\n        logging.error(\n            ' Check that the Workflow: %s, Taskname: %s, foldername: %s and is_servicename: %s are correct.' % (\n                args.workflow, task_instance_path, args.folder, args.service))\n        exit(1)\n    else:\n        logging.info(\" Starting Task Succeeded with code : \" + str(\n            response.status_code))\n        logging.debug(\" -- Response XML: \" + response.text)\n\n\ndef monitor_task(task_instance_path):\n    \"\"\"Monitor Informatica Task\"\"\"\n    logging.info(\"monitor_task\")\n    # -- Create SOAP XML\n    soap_xml = \"\"\"\n    <soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n        <soap:Header>\n            <ns0:Context xmlns:ns0=\"http://www.informatica.com/wsh\">\n                <SessionId>{logon_token}</SessionId>\n            </ns0:Context>\n        </soap:Header>\n        <soap:Body>\n            <ns0:WaitTillTaskComplete xmlns:ns0=\"http://www.informatica.com/wsh\">\n                <DIServiceInfo>\n                    <DomainName>{domain}</DomainName>\n                    <ServiceName>{service}</ServiceName>\n                </DIServiceInfo>\n                <FolderName>{folder}</FolderName>\n                <WorkflowName>{workflow}</WorkflowName>\n                <RequestMode>{requestmode}</RequestMode>\n                <TaskInstancePath>{task_instance_path}</TaskInstancePath>\n            </ns0:WaitTillTaskComplete>\n        </soap:Body>\n    </soap:Envelope>\n    \"\"\".format(logon_token=logon_token, domain=args.domain,\n               service=args.service, folder=args.folder, workflow=args.workflow,\n               requestmode=args.requestmode,\n               task_instance_path=task_instance_path)\n    # -- Set SoapCall() Parameters and Make SOAP Request\n    soap_data = soap_xml.encode('utf-8')\n    soap_url = args.ssl + args.host + \":\" + args.port + \"/wsh/services/BatchServices/DataIntegration?WSDL\"\n    soap_headers = {\n        'content-type': 'text/soap+xml',\n        'charset': 'UTF-8',\n        'SOAPAction': 'WaitTillTaskComplete'\n    }\n    logging.info(\n        \" -- Monitoring Task (SOAP Request) WORKFLOW = \" + args.workflow)\n    logging.debug(\" -- Request XML: \" + soap_xml)\n    try:\n        response = requests.post(soap_url, data=soap_data, headers=soap_headers,\n                                 verify=False)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(' Failure : %s' % e)\n        exit(1)\n    else:\n        logging.debug(\" -- Response XML: \" + response.text)\n\n\n# -- Start Informatica Workflow from a specific task\ndef start_workflow_from_task(task_instance_path):\n    \"\"\"Start Informatica Workflow from a specific task using the requested Session ID\"\"\"\n    logging.info(\"start_workflow\")\n    # -- Create SOAP XML\n    soap_xml = \"\"\"\n    <soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:wsh=\\\"http://www.informatica.com/wsh\">\n        <soapenv:Header>\n            <wsh:Context>\n                <SessionId>{logon_token}</SessionId>\n            </wsh:Context>\n        </soapenv:Header>\n        <soapenv:Body>\n            <wsh:StartWorkflow>\n                <DIServiceInfo>\n                    <DomainName>{domain}</DomainName>\n                    <ServiceName>{service}</ServiceName>\n                </DIServiceInfo>\n                <FolderName>{folder}</FolderName>\n                <WorkflowName>{workflow}</WorkflowName>\n                <RequestMode>{requestmode}</RequestMode>\n                <TaskInstancePath>{task_instance_path}</TaskInstancePath>\n            </wsh:StartWorkflow>\n        </soapenv:Body>\n    </soapenv:Envelope>\n    \"\"\".format(logon_token=logon_token, domain=args.domain,\n               service=args.service, folder=args.folder, workflow=args.workflow,\n               requestmode=args.requestmode,\n               task_instance_path=task_instance_path)\n    # -- Set SoapCall() Parameters and Make SOAP Request\n    soap_data = soap_xml.encode('utf-8')\n    soap_url = args.ssl + args.host + \":\" + args.port + \"/wsh/services/BatchServices/DataIntegration?WSDL\"\n    soap_headers = {\n        'content-type': 'text/soap+xml',\n        'charset': 'UTF-8',\n        'SOAPAction': 'startWorkflowFromTask'\n    }\n    logging.info(\n        \" -- Starting WF from Task (SOAP Request)  \" + task_instance_path + \", in WORKFLOW = \" + args.workflow)\n    logging.debug(\" -- Request XML: \" + soap_xml)\n    try:\n        response = requests.post(soap_url, data=soap_data, headers=soap_headers,\n                                 verify=False)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(' Failure : %s' % e)\n        logging.error(\n            ' Check that the Workflow: %s, Taskname: %s, foldername: %s and is_servicename: %s are correct.' % (\n                args.workflow, task_instance_path, args.folder, args.service))\n        exit(1)\n    else:\n        logging.info(\" Starting Task Succeeded with code : \" + str(\n            response.status_code))\n        logging.debug(\" -- Response XML: \" + response.text)\n\n\n# -- Monitor Informatica Workflow\ndef monitor_workflow():\n    \"\"\"Monitor Informatica Workflow\"\"\"\n    logging.info(\"monitor_workflow\")\n    # -- Create SOAP XML\n    soap_xml = \"\"\"\n    <soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n        <soap:Header>\n            <ns0:Context xmlns:ns0=\"http://www.informatica.com/wsh\">\n                <SessionId>{logon_token}</SessionId>\n            </ns0:Context>\n        </soap:Header>\n        <soap:Body>\n            <ns0:WaitTillWorkflowComplete xmlns:ns0=\"http://www.informatica.com/wsh\">\n                <DIServiceInfo>\n                    <DomainName>{domain}</DomainName>\n                    <ServiceName>{service}</ServiceName>\n                </DIServiceInfo>\n                <FolderName>{folder}</FolderName>\n                <WorkflowName>{workflow}</WorkflowName>\n                <RequestMode>{requestmode}</RequestMode>\n            </ns0:WaitTillWorkflowComplete>\n        </soap:Body>\n    </soap:Envelope>\n    \"\"\".format(logon_token=logon_token, domain=args.domain,\n               service=args.service, folder=args.folder, workflow=args.workflow,\n               requestmode=args.requestmode)\n    # -- Set SoapCall() Parameters and Make SOAP Request\n    soap_data = soap_xml.encode('utf-8')\n    soap_url = args.ssl + args.host + \":\" + args.port + \"/wsh/services/BatchServices/DataIntegration?WSDL\"\n    soap_headers = {\n        'content-type': 'text/soap+xml',\n        'charset': 'UTF-8',\n        'SOAPAction': 'WaitTillWorkflowComplete'\n    }\n    logging.info(\n        \" -- Monitoring Workflow (SOAP Request) WORKFLOW = \" + args.workflow)\n    logging.debug(\" -- Request XML: \" + soap_xml)\n    try:\n        response = requests.post(soap_url, data=soap_data, headers=soap_headers,\n                                 verify=False)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(' Failure : %s' % e)\n        exit(1)\n    else:\n        logging.debug(\" -- Response XML: \" + response.text)\n\n\n# -- Return the session log\ndef get_workflow_log_xml():\n    \"\"\"Return the session log from the Informatica Workflow\"\"\"\n    logging.info(\"get_workflow_log\")\n    soap_xml = \"\"\"\n    <soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n     <soap:Header>\n      <ns0:Context xmlns:ns0=\"http://www.informatica.com/wsh\">\n         <SessionId>{logon_token}</SessionId>\n      </ns0:Context>\n     </soap:Header>\n     <soap:Body xmlns:ns0=\"http://www.informatica.com/wsh\">\n      <ns0:GetWorkflowLog>\n         <DIServiceInfo>\n            <DomainName>{domain}</DomainName>\n            <ServiceName>{service}</ServiceName>\n         </DIServiceInfo>\n         <FolderName>{folder}</FolderName>\n         <WorkflowName>{workflow}</WorkflowName>\n         <Timeout>{timeout}</Timeout>\n      </ns0:GetWorkflowLog>\n     </soap:Body>\n    </soap:Envelope>\n    \"\"\".format(logon_token=logon_token, domain=args.domain,\n               service=args.service, folder=args.folder, workflow=args.workflow,\n               timeout=args.timeout)\n    # -- Set SoapCall() Parameters and Make SOAP Request\n    soap_data = soap_xml.encode('utf-8')\n    soap_url = args.ssl + args.host + \":\" + args.port + \"/wsh/services/BatchServices/DataIntegration?WSDL\"\n    soap_headers = {\n        'content-type': 'text/soap+xml',\n        'charset': 'UTF-8',\n        'SOAPAction': 'getWorkflowLog'\n    }\n    logging.info(\" -- Workflow Log: \" + args.workflow)\n    logging.debug(\" -- Request XML: \" + soap_xml)\n    try:\n        response = requests.post(soap_url, data=soap_data, headers=soap_headers,\n                                 verify=False)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(' Failure : %s' % e)\n        exit(1)\n    else:\n        logging.info(\" -- Response XML: \" + response.text)\n        check_response(\"WorkflowLog\", response.text)\n\n\ndef get_session_log(task_instance_path):\n    \"\"\"Return the session log from the Informatica\"\"\"\n    logging.info(\"get_session_log\")\n    soap_xml = \"\"\"\n    <soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n     <soap:Header>\n      <ns0:Context xmlns:ns0=\"http://www.informatica.com/wsh\">\n         <SessionId>{logon_token}</SessionId>\n      </ns0:Context>\n     </soap:Header>\n     <soap:Body xmlns:ns0=\"http://www.informatica.com/wsh\">\n      <ns0:GetSessionLog>\n         <DIServiceInfo>\n            <DomainName>{domain}</DomainName>\n            <ServiceName>{service}</ServiceName>\n         </DIServiceInfo>\n         <FolderName>{folder}</FolderName>\n         <WorkflowName>{workflow}</WorkflowName>\n         <TaskInstancePath>{task_instance_path}</TaskInstancePath>\n         <Timeout>{timeout}</Timeout>\n      </ns0:GetSessionLog>\n     </soap:Body>\n    </soap:Envelope>\n    \"\"\".format(logon_token=logon_token, domain=args.domain,\n               service=args.service, folder=args.folder, workflow=args.workflow,\n               task_instance_path=task_instance_path, timeout=args.timeout)\n    # -- Set SoapCall() Parameters and Make SOAP Request\n    soap_data = soap_xml.encode('utf-8')\n    soap_url = args.ssl + args.host + \":\" + args.port + \"/wsh/services/BatchServices/DataIntegration?WSDL\"\n    soap_headers = {\n        'content-type': 'text/soap+xml',\n        'charset': 'UTF-8',\n        'SOAPAction': 'getSessionLog'\n    }\n    logging.info(\" -- Session Log: \" + args.path)\n    logging.debug(\" -- Request XML: \" + soap_xml)\n    try:\n        response = requests.post(soap_url, data=soap_data, headers=soap_headers,\n                                 verify=False)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(' Failure : %s' % e)\n        exit(1)\n    else:\n        logging.info(\" -- Response XML: \" + response.text)\n        check_response(\"SessionLog\", response.text)\n\n\n# -- Logout from Session\ndef close_session():\n    \"\"\"Logout from Session\"\"\"\n    logging.info(\"close_session\")\n    soap_xml = \"\"\"\n    <soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n        <soap:Header>\n           <ns0:Context xmlns:ns0=\"http://www.informatica.com/wsh\">\n              <SessionId>{logon_token}</SessionId>\n           </ns0:Context>\n        </soap:Header>\n        <soap:Body>\n           <ns0:Logout xmlns:ns0=\"http://www.informatica.com/wsh\"/>\n        </soap:Body>\n    </soap:Envelope>\n    \"\"\".format(logon_token=logon_token)\n    # -- Set SoapCall() Parameters and Make SOAP Request\n    soap_data = soap_xml.encode('utf-8')\n    soap_url = args.ssl + args.host + \":\" + args.port + \"/wsh/services/BatchServices/Metadata\"\n    soap_headers = {\n        'content-type': 'text/soap+xml',\n        'charset': 'UTF-8',\n        'SOAPAction': 'Logout'\n    }\n    logging.info(\" -- Closing Session (SOAP Request)\")\n    logging.debug(\" -- Request XML: \" + soap_xml)\n    try:\n        response = requests.post(soap_url, data=soap_data, headers=soap_headers,\n                                 verify=False)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(' Failure : %s' % e)\n        exit(1)\n    else:\n        logging.debug(\" -- Response XML: \" + response.text)\n\n\nif __name__ == '__main__':\n    main()\n",
    "scriptWindows": "#!/opt/universal/python3.6/bin/python3\n#\n#  Name:               UT_Informatica_RunWorkflow\n#  Purpose:            Universal Task Script to Run an Informatica Workflow\n#                      1- Get Session ID (logon_token)\n#                      2- Start Workflow\n#                      3- Monitor Workflow Completion\n#                      4- Get Session Log\n#                      5- Close Session\n#  Disclaimer\n#  No support and no warranty are provided for this Universal Task.\n#  The use of this document and the related Universal Task is on your own risk.\n#  Before using this task in a production system, please perform extensive\n#  testing.\n#\n#  Version History:\n#     0.1  NBU     2017-03-17     initial Version using a shell script and curl\n#     1.0  CCO     2017-10-02     Conversion from Shell Script Version to python\n#     1.1  NBU     2017-12-20     Using getWorkflowLog instead of getSessionLog\n#     2.0  NBU     2018-01-09     Added Logon Token support, Logging, doc\n#                                 strings and intensive error handling\n#     2.1  NBU     2018-01-11     Added support for Https connections\n#     2.2  NBU     2018-07-08     changed envelope header\n#     2.3  NBU     2021-02-05     diagnose print functions added\n#     2.4  NBU     2021-02-05     cleanup\n#     2.5  NBU     2021-02-05     GetSessionLog added\n#     2.6  NBU     2021-02-05     GetSessionLog print the correct taskname\n#                                 two new choice fields\n#     2.7  NBU     2021-02-05     cleanup\n#     2.8  NBU     2021-02-05     choice for session or wf log added\n#     2.9  NBU     2021-02-05     choice for session or wf log added\n#     3.0  NBU     2021-02-08     Funcation start task and start from task added\n#     3.1  NBU     2021-02-08     Funcation start task and start from task added\n#\n# --\n\n# -- Import required python modules\nimport argparse\nimport logging\nimport site\nimport sys\nfrom xml.dom.minidom import parseString\n\nimport requests\n\ngl_version = \"3.1\"\ngl_variable_prefix = \"var\"\ngl_get_session_log = \"${ops_var_getsessionlog}\"\ngl_error_messages = \"\"\ngl_action = \"${ops_var_action}\"\ngl_task_instance_path = \"${ops_var_task_instance_path}\"\n# -- logging settings DEBUG, INFO, WARNING, ERROR, CRITICAL\nlogging.basicConfig(level=\"${ops_var_loglevel}\",\n                    format=' %(asctime)s - %(levelname)s - %(message)s')\n\n\n# -- Main Logic Function\ndef main():\n    \"\"\"calls the required functions to run the informatica workflow\"\"\"\n    global gl_get_session_log\n    print_variables()\n    set_variables()  # - Set Variables from UTask Form or Command Line Input\n    get_session_id()  # - Create SessionID Request SOAP Env and Req Sess. ID\n    if gl_error_messages:\n        logging.error(f\"There were errors in the logs:\\n {gl_error_messages}\")\n        exit(1)\n    if gl_action == \"startWorkflow\":\n        start_workflow()  # - Start Informatica Workflow\n        monitor_workflow()  # - Monitor Informatica Workflow\n        get_workflow_log_xml()  # - Return the workflow log\n        pass\n    elif gl_action == \"startTask\":\n        start_task(gl_task_instance_path)  # 'SOAPAction': 'startTask'\n        monitor_task(gl_task_instance_path)  # - Monitor Informatica Workflow\n        gl_get_session_log = \"true\"\n        pass\n    elif gl_action == \"startWorkflowFromTask\":\n        start_workflow_from_task(gl_task_instance_path)  # - Start Informatica Workflow\n        monitor_workflow()  # - Monitor Informatica Workflow\n        get_workflow_log_xml()  # - Return the workflow log\n        pass\n    if gl_get_session_log == \"true\":\n        get_session_log(gl_task_instance_path)  # - Returns the session log of the provided task\n    close_session()  # - Logout from Session\n\n\ndef print_variables():\n    \"\"\"logging.infos out the python and script version\n    and all universal template variables\n    \"\"\"\n    logging.info(\"Python version <<< \" + sys.version + \" >>>\")\n    logging.info(\"Python sites <<< \" + str(site.getsitepackages()) + \" >>>\")\n    logging.info(\"Executing task version \" + gl_version + \" with the following \"\n                                                          \"parameters\")\n    print_defined_variables(gl_variable_prefix)\n\n\ndef print_defined_variables(variable_prefix):\n    \"\"\"logging.info's out universal template variables\"\"\"\n    all_variables = r\"${_scope}\"\n    separate_variables = [variable for variable in all_variables.split(', ') if\n                          \"ops_\" + variable_prefix in variable]\n    logging.info(str(separate_variables).replace(\", \", \",\\n\"))\n\n\n# -- Set Variables from Universal Task Form or Command Line Input\ndef set_variables():\n    \"\"\"Set Variables from Universal Task Form or Command Line Input\"\"\"\n    parser = argparse.ArgumentParser(\n        description='Purpose : Run Informatica Workflow')\n    parser.add_argument(\"--port\", default=\"${ops_var_info_port}\")\n    parser.add_argument(\"--host\", default=\"${ops_var_info_host}\")\n    parser.add_argument(\"--domain\", default=\"${ops_var_domainname}\")\n    parser.add_argument(\"--repository\", default=\"${ops_var_repositoryname}\")\n    parser.add_argument(\"--username\",\n                        default=\"${_credentialUser('${ops_var_infocred}')}\")\n    parser.add_argument(\"--password\",\n                        default=\"${_credentialPwd('${ops_var_infocred}')}\")\n    parser.add_argument(\"--namespace\", default=\"${ops_var_usernamespace}\")\n    parser.add_argument(\"--service\", default=\"${ops_var_servicename}\")\n    parser.add_argument(\"--folder\", default=\"${ops_var_foldername}\")\n    parser.add_argument(\"--workflow\", default=\"${ops_var_workflowname}\")\n    parser.add_argument(\"--requestmode\", default=\"${ops_var_requestmode}\")\n    parser.add_argument(\"--timeout\", default=\"${ops_var_timeout}\")\n    parser.add_argument(\"--path\", default=\"${ops_var_taskinstancepath}\")\n    parser.add_argument(\"--loglevel\", default=\"${ops_var_loglevel}\")\n    parser.add_argument(\"--ssl\", default=\"${ops_var_ssl}\")\n    global args\n    global logon_token\n    args = parser.parse_args()\n    # logging.info(\" -- Executing version \" + version\n    # + \" with the following paramaters\")\n    logging.info(args)\n    logging.info(\" -- Informatica Workflow to run: \" + args.workflow)\n\n\ndef check_response(log_type, response_text):\n    global gl_error_messages\n    error_messages = \"\"\n    for response_line in response_text.split(\"\\n\"):\n        logging.debug(response_line)\n        if \"ERROR : \" in response_line:\n            error_messages += response_line + \"\\n\"\n    if error_messages:\n        gl_error_messages += f\"ERROR(s) found in {log_type}:\\n{error_messages}\"\n    pass\n\n\n# -- Create SessionID Request SOAP Envelope and Request Session ID\ndef get_session_id():\n    \"\"\"Create SessionID Request SOAP Envelope and Request Session ID\"\"\"\n    logging.info(\"get_session_id\")\n    # -- Create SOAP XML\n    soap_xml = \"\"\"\n    <soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n        <soap:Header/>\n        <soap:Body>\n            <ns0:Login xmlns:ns0=\"http://www.informatica.com/wsh\">\n                <RepositoryDomainName>{domain}</RepositoryDomainName>\n                <RepositoryName>{repository}</RepositoryName>\n                <UserName>{username}</UserName>\n                <Password>{password}</Password>\n                <UserNameSpace>{namespace}</UserNameSpace>\n            </ns0:Login>\n        </soap:Body>\n    </soap:Envelope>\n    \"\"\".format(domain=args.domain, repository=args.repository,\n               username=args.username, password=args.password,\n               namespace=args.namespace)\n    # -- Set SoapCall() Parameters and Make SOAP Request\n    soap_data = soap_xml.encode('utf-8')\n    soap_url = args.ssl + args.host + \":\" + args.port + \"/wsh/services/BatchServices/Metadata\"\n    soap_headers = {\n        'content-type': 'text/soap+xml',\n        'charset': 'UTF-8',\n        'SOAPAction': 'login'\n    }\n    logging.info(\" -- Requesting Session ID (SOAP Request)\")\n    logging.debug(\" -- Request XML\" + soap_xml)\n    try:\n        response = requests.post(soap_url, data=soap_data, headers=soap_headers,\n                                 verify=False)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(' Failure : %s' % e)\n        exit(1)\n    else:\n        logging.info(\"#UT_INFO# Request SessionId Succeeded with code : \" + str(\n            response.status_code))\n        logging.debug(\" -- Response XML: \" + response.text)\n        dom = parseString(response.content)\n        for node in dom.getElementsByTagName('SessionId'):  # visit every node\n            global logon_token\n            logon_token = str(node.childNodes[0].data)\n\n\n# -- Start Informatica Workflow\ndef start_workflow():\n    \"\"\"Start Informatica Workflow using the requested Session ID\"\"\"\n    logging.info(\"start_workflow\")\n    # -- Create SOAP XML\n    soap_xml = \"\"\"\n    <soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:wsh=\\\"http://www.informatica.com/wsh\">\n        <soapenv:Header>\n            <wsh:Context>\n                <SessionId>{logon_token}</SessionId>\n            </wsh:Context>\n        </soapenv:Header>\n        <soapenv:Body>\n            <wsh:StartWorkflow>\n                <DIServiceInfo>\n                    <DomainName>{domain}</DomainName>\n                    <ServiceName>{service}</ServiceName>\n                </DIServiceInfo>\n                <FolderName>{folder}</FolderName>\n                <WorkflowName>{workflow}</WorkflowName>\n                <RequestMode>{requestmode}</RequestMode>\n            </wsh:StartWorkflow>\n        </soapenv:Body>\n    </soapenv:Envelope>\n    \"\"\".format(logon_token=logon_token, domain=args.domain,\n               service=args.service, folder=args.folder, workflow=args.workflow,\n               requestmode=args.requestmode)\n    # -- Set SoapCall() Parameters and Make SOAP Request\n    soap_data = soap_xml.encode('utf-8')\n    soap_url = args.ssl + args.host + \":\" + args.port + \"/wsh/services/BatchServices/DataIntegration?WSDL\"\n    soap_headers = {\n        'content-type': 'text/soap+xml',\n        'charset': 'UTF-8',\n        'SOAPAction': 'startWorkflow'\n    }\n    logging.info(\n        \" -- Starting Workflow (SOAP Request) WORKFLOW = \" + args.workflow)\n    logging.debug(\" -- Request XML: \" + soap_xml)\n    try:\n        response = requests.post(soap_url, data=soap_data, headers=soap_headers,\n                                 verify=False)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(' Failure : %s' % e)\n        logging.error(\n            ' Check that the Workflow: %s, foldername: %s and is_servicename: %s are correct.' % (\n                args.workflow, args.folder, args.service))\n        exit(1)\n    else:\n        logging.info(\" Starting Workflow Succeeded with code : \" + str(\n            response.status_code))\n        logging.debug(\" -- Response XML: \" + response.text)\n\n\n# -- Start Informatica Task\ndef start_task(task_instance_path):\n    \"\"\"Start Informatica Task using the requested Session ID\"\"\"\n    logging.info(\"start_workflow\")\n    # -- Create SOAP XML\n    soap_xml = \"\"\"\n    <soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:wsh=\\\"http://www.informatica.com/wsh\">\n        <soapenv:Header>\n            <wsh:Context>\n                <SessionId>{logon_token}</SessionId>\n            </wsh:Context>\n        </soapenv:Header>\n        <soapenv:Body>\n            <wsh:StartWorkflow>\n                <DIServiceInfo>\n                    <DomainName>{domain}</DomainName>\n                    <ServiceName>{service}</ServiceName>\n                </DIServiceInfo>\n                <FolderName>{folder}</FolderName>\n                <WorkflowName>{workflow}</WorkflowName>\n                <RequestMode>{requestmode}</RequestMode>\n                <TaskInstancePath>{task_instance_path}</TaskInstancePath>\n            </wsh:StartWorkflow>\n        </soapenv:Body>\n    </soapenv:Envelope>\n    \"\"\".format(logon_token=logon_token, domain=args.domain,\n               service=args.service, folder=args.folder, workflow=args.workflow,\n               requestmode=args.requestmode,\n               task_instance_path=task_instance_path)\n    # -- Set SoapCall() Parameters and Make SOAP Request\n    soap_data = soap_xml.encode('utf-8')\n    soap_url = args.ssl + args.host + \":\" + args.port + \"/wsh/services/BatchServices/DataIntegration?WSDL\"\n    soap_headers = {\n        'content-type': 'text/soap+xml',\n        'charset': 'UTF-8',\n        'SOAPAction': 'startTask'\n    }\n    logging.info(\n        \" -- Starting Task (SOAP Request)  \" + task_instance_path + \", in WORKFLOW = \" + args.workflow)\n    logging.debug(\" -- Request XML: \" + soap_xml)\n    try:\n        response = requests.post(soap_url, data=soap_data, headers=soap_headers,\n                                 verify=False)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(' Failure : %s' % e)\n        logging.error(\n            ' Check that the Workflow: %s, Taskname: %s, foldername: %s and is_servicename: %s are correct.' % (\n                args.workflow, task_instance_path, args.folder, args.service))\n        exit(1)\n    else:\n        logging.info(\" Starting Task Succeeded with code : \" + str(\n            response.status_code))\n        logging.debug(\" -- Response XML: \" + response.text)\n\n\ndef monitor_task(task_instance_path):\n    \"\"\"Monitor Informatica Task\"\"\"\n    logging.info(\"monitor_task\")\n    # -- Create SOAP XML\n    soap_xml = \"\"\"\n    <soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n        <soap:Header>\n            <ns0:Context xmlns:ns0=\"http://www.informatica.com/wsh\">\n                <SessionId>{logon_token}</SessionId>\n            </ns0:Context>\n        </soap:Header>\n        <soap:Body>\n            <ns0:WaitTillTaskComplete xmlns:ns0=\"http://www.informatica.com/wsh\">\n                <DIServiceInfo>\n                    <DomainName>{domain}</DomainName>\n                    <ServiceName>{service}</ServiceName>\n                </DIServiceInfo>\n                <FolderName>{folder}</FolderName>\n                <WorkflowName>{workflow}</WorkflowName>\n                <RequestMode>{requestmode}</RequestMode>\n                <TaskInstancePath>{task_instance_path}</TaskInstancePath>\n            </ns0:WaitTillTaskComplete>\n        </soap:Body>\n    </soap:Envelope>\n    \"\"\".format(logon_token=logon_token, domain=args.domain,\n               service=args.service, folder=args.folder, workflow=args.workflow,\n               requestmode=args.requestmode,\n               task_instance_path=task_instance_path)\n    # -- Set SoapCall() Parameters and Make SOAP Request\n    soap_data = soap_xml.encode('utf-8')\n    soap_url = args.ssl + args.host + \":\" + args.port + \"/wsh/services/BatchServices/DataIntegration?WSDL\"\n    soap_headers = {\n        'content-type': 'text/soap+xml',\n        'charset': 'UTF-8',\n        'SOAPAction': 'WaitTillTaskComplete'\n    }\n    logging.info(\n        \" -- Monitoring Task (SOAP Request) WORKFLOW = \" + args.workflow)\n    logging.debug(\" -- Request XML: \" + soap_xml)\n    try:\n        response = requests.post(soap_url, data=soap_data, headers=soap_headers,\n                                 verify=False)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(' Failure : %s' % e)\n        exit(1)\n    else:\n        logging.debug(\" -- Response XML: \" + response.text)\n\n\n# -- Start Informatica Workflow from a specific task\ndef start_workflow_from_task(task_instance_path):\n    \"\"\"Start Informatica Workflow from a specific task using the requested Session ID\"\"\"\n    logging.info(\"start_workflow\")\n    # -- Create SOAP XML\n    soap_xml = \"\"\"\n    <soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:wsh=\\\"http://www.informatica.com/wsh\">\n        <soapenv:Header>\n            <wsh:Context>\n                <SessionId>{logon_token}</SessionId>\n            </wsh:Context>\n        </soapenv:Header>\n        <soapenv:Body>\n            <wsh:StartWorkflow>\n                <DIServiceInfo>\n                    <DomainName>{domain}</DomainName>\n                    <ServiceName>{service}</ServiceName>\n                </DIServiceInfo>\n                <FolderName>{folder}</FolderName>\n                <WorkflowName>{workflow}</WorkflowName>\n                <RequestMode>{requestmode}</RequestMode>\n                <TaskInstancePath>{task_instance_path}</TaskInstancePath>\n            </wsh:StartWorkflow>\n        </soapenv:Body>\n    </soapenv:Envelope>\n    \"\"\".format(logon_token=logon_token, domain=args.domain,\n               service=args.service, folder=args.folder, workflow=args.workflow,\n               requestmode=args.requestmode,\n               task_instance_path=task_instance_path)\n    # -- Set SoapCall() Parameters and Make SOAP Request\n    soap_data = soap_xml.encode('utf-8')\n    soap_url = args.ssl + args.host + \":\" + args.port + \"/wsh/services/BatchServices/DataIntegration?WSDL\"\n    soap_headers = {\n        'content-type': 'text/soap+xml',\n        'charset': 'UTF-8',\n        'SOAPAction': 'startWorkflowFromTask'\n    }\n    logging.info(\n        \" -- Starting WF from Task (SOAP Request)  \" + task_instance_path + \", in WORKFLOW = \" + args.workflow)\n    logging.debug(\" -- Request XML: \" + soap_xml)\n    try:\n        response = requests.post(soap_url, data=soap_data, headers=soap_headers,\n                                 verify=False)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(' Failure : %s' % e)\n        logging.error(\n            ' Check that the Workflow: %s, Taskname: %s, foldername: %s and is_servicename: %s are correct.' % (\n                args.workflow, task_instance_path, args.folder, args.service))\n        exit(1)\n    else:\n        logging.info(\" Starting Task Succeeded with code : \" + str(\n            response.status_code))\n        logging.debug(\" -- Response XML: \" + response.text)\n\n\n# -- Monitor Informatica Workflow\ndef monitor_workflow():\n    \"\"\"Monitor Informatica Workflow\"\"\"\n    logging.info(\"monitor_workflow\")\n    # -- Create SOAP XML\n    soap_xml = \"\"\"\n    <soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n        <soap:Header>\n            <ns0:Context xmlns:ns0=\"http://www.informatica.com/wsh\">\n                <SessionId>{logon_token}</SessionId>\n            </ns0:Context>\n        </soap:Header>\n        <soap:Body>\n            <ns0:WaitTillWorkflowComplete xmlns:ns0=\"http://www.informatica.com/wsh\">\n                <DIServiceInfo>\n                    <DomainName>{domain}</DomainName>\n                    <ServiceName>{service}</ServiceName>\n                </DIServiceInfo>\n                <FolderName>{folder}</FolderName>\n                <WorkflowName>{workflow}</WorkflowName>\n                <RequestMode>{requestmode}</RequestMode>\n            </ns0:WaitTillWorkflowComplete>\n        </soap:Body>\n    </soap:Envelope>\n    \"\"\".format(logon_token=logon_token, domain=args.domain,\n               service=args.service, folder=args.folder, workflow=args.workflow,\n               requestmode=args.requestmode)\n    # -- Set SoapCall() Parameters and Make SOAP Request\n    soap_data = soap_xml.encode('utf-8')\n    soap_url = args.ssl + args.host + \":\" + args.port + \"/wsh/services/BatchServices/DataIntegration?WSDL\"\n    soap_headers = {\n        'content-type': 'text/soap+xml',\n        'charset': 'UTF-8',\n        'SOAPAction': 'WaitTillWorkflowComplete'\n    }\n    logging.info(\n        \" -- Monitoring Workflow (SOAP Request) WORKFLOW = \" + args.workflow)\n    logging.debug(\" -- Request XML: \" + soap_xml)\n    try:\n        response = requests.post(soap_url, data=soap_data, headers=soap_headers,\n                                 verify=False)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(' Failure : %s' % e)\n        exit(1)\n    else:\n        logging.debug(\" -- Response XML: \" + response.text)\n\n\n# -- Return the session log\ndef get_workflow_log_xml():\n    \"\"\"Return the session log from the Informatica Workflow\"\"\"\n    logging.info(\"get_workflow_log\")\n    soap_xml = \"\"\"\n    <soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n     <soap:Header>\n      <ns0:Context xmlns:ns0=\"http://www.informatica.com/wsh\">\n         <SessionId>{logon_token}</SessionId>\n      </ns0:Context>\n     </soap:Header>\n     <soap:Body xmlns:ns0=\"http://www.informatica.com/wsh\">\n      <ns0:GetWorkflowLog>\n         <DIServiceInfo>\n            <DomainName>{domain}</DomainName>\n            <ServiceName>{service}</ServiceName>\n         </DIServiceInfo>\n         <FolderName>{folder}</FolderName>\n         <WorkflowName>{workflow}</WorkflowName>\n         <Timeout>{timeout}</Timeout>\n      </ns0:GetWorkflowLog>\n     </soap:Body>\n    </soap:Envelope>\n    \"\"\".format(logon_token=logon_token, domain=args.domain,\n               service=args.service, folder=args.folder, workflow=args.workflow,\n               timeout=args.timeout)\n    # -- Set SoapCall() Parameters and Make SOAP Request\n    soap_data = soap_xml.encode('utf-8')\n    soap_url = args.ssl + args.host + \":\" + args.port + \"/wsh/services/BatchServices/DataIntegration?WSDL\"\n    soap_headers = {\n        'content-type': 'text/soap+xml',\n        'charset': 'UTF-8',\n        'SOAPAction': 'getWorkflowLog'\n    }\n    logging.info(\" -- Workflow Log: \" + args.workflow)\n    logging.debug(\" -- Request XML: \" + soap_xml)\n    try:\n        response = requests.post(soap_url, data=soap_data, headers=soap_headers,\n                                 verify=False)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(' Failure : %s' % e)\n        exit(1)\n    else:\n        logging.info(\" -- Response XML: \" + response.text)\n        check_response(\"WorkflowLog\", response.text)\n\n\ndef get_session_log(task_instance_path):\n    \"\"\"Return the session log from the Informatica\"\"\"\n    logging.info(\"get_session_log\")\n    soap_xml = \"\"\"\n    <soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n     <soap:Header>\n      <ns0:Context xmlns:ns0=\"http://www.informatica.com/wsh\">\n         <SessionId>{logon_token}</SessionId>\n      </ns0:Context>\n     </soap:Header>\n     <soap:Body xmlns:ns0=\"http://www.informatica.com/wsh\">\n      <ns0:GetSessionLog>\n         <DIServiceInfo>\n            <DomainName>{domain}</DomainName>\n            <ServiceName>{service}</ServiceName>\n         </DIServiceInfo>\n         <FolderName>{folder}</FolderName>\n         <WorkflowName>{workflow}</WorkflowName>\n         <TaskInstancePath>{task_instance_path}</TaskInstancePath>\n         <Timeout>{timeout}</Timeout>\n      </ns0:GetSessionLog>\n     </soap:Body>\n    </soap:Envelope>\n    \"\"\".format(logon_token=logon_token, domain=args.domain,\n               service=args.service, folder=args.folder, workflow=args.workflow,\n               task_instance_path=task_instance_path, timeout=args.timeout)\n    # -- Set SoapCall() Parameters and Make SOAP Request\n    soap_data = soap_xml.encode('utf-8')\n    soap_url = args.ssl + args.host + \":\" + args.port + \"/wsh/services/BatchServices/DataIntegration?WSDL\"\n    soap_headers = {\n        'content-type': 'text/soap+xml',\n        'charset': 'UTF-8',\n        'SOAPAction': 'getSessionLog'\n    }\n    logging.info(\" -- Session Log: \" + args.path)\n    logging.debug(\" -- Request XML: \" + soap_xml)\n    try:\n        response = requests.post(soap_url, data=soap_data, headers=soap_headers,\n                                 verify=False)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(' Failure : %s' % e)\n        exit(1)\n    else:\n        logging.info(\" -- Response XML: \" + response.text)\n        check_response(\"SessionLog\", response.text)\n\n\n# -- Logout from Session\ndef close_session():\n    \"\"\"Logout from Session\"\"\"\n    logging.info(\"close_session\")\n    soap_xml = \"\"\"\n    <soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n        <soap:Header>\n           <ns0:Context xmlns:ns0=\"http://www.informatica.com/wsh\">\n              <SessionId>{logon_token}</SessionId>\n           </ns0:Context>\n        </soap:Header>\n        <soap:Body>\n           <ns0:Logout xmlns:ns0=\"http://www.informatica.com/wsh\"/>\n        </soap:Body>\n    </soap:Envelope>\n    \"\"\".format(logon_token=logon_token)\n    # -- Set SoapCall() Parameters and Make SOAP Request\n    soap_data = soap_xml.encode('utf-8')\n    soap_url = args.ssl + args.host + \":\" + args.port + \"/wsh/services/BatchServices/Metadata\"\n    soap_headers = {\n        'content-type': 'text/soap+xml',\n        'charset': 'UTF-8',\n        'SOAPAction': 'Logout'\n    }\n    logging.info(\" -- Closing Session (SOAP Request)\")\n    logging.debug(\" -- Request XML: \" + soap_xml)\n    try:\n        response = requests.post(soap_url, data=soap_data, headers=soap_headers,\n                                 verify=False)\n        response.raise_for_status()\n    except requests.exceptions.RequestException as e:\n        logging.error(' Failure : %s' % e)\n        exit(1)\n    else:\n        logging.debug(\" -- Response XML: \" + response.text)\n\n\nif __name__ == '__main__':\n    main()\n",
    "sysId": "c39bba9112e34156b44aae2d43d24a3e",
    "useCommonScript": false,
    "variablePrefix": "var",
    "waitForOutput": false
}